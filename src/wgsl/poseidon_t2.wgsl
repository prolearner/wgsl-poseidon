@compute
@workgroup_size(64)
fn fft(@builtin(global_invocation_id) global_id: vec3<u32>) {
    var i: u32 = global_id.x;
    var p: BigInt256 = fr_get_p();
    var n: u32 = 10u;

    var roots: array<BigInt256, 10> = array<BigInt256, 10> (
        BigInt256(array<u32, 16>(59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u,59685u,59685u,59685u,59685u,59685u,59685u,59685u)),
        BigInt256(array<u32, 16>(59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u,59685u,59685u,59685u,59685u,59685u,59685u,59685u)),
        BigInt256(array<u32, 16>(59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u,59685u,59685u,59685u,59685u,59685u,59685u,59685u)),
        BigInt256(array<u32, 16>(59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u,59685u,59685u,59685u,59685u,59685u,59685u,59685u)),
        BigInt256(array<u32, 16>(59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u,59685u,59685u,59685u,59685u,59685u,59685u,59685u)),
        BigInt256(array<u32, 16>(59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u,59685u,59685u,59685u,59685u,59685u,59685u,59685u)),
        BigInt256(array<u32, 16>(59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u,59685u,59685u,59685u,59685u,59685u,59685u,59685u)),
        BigInt256(array<u32, 16>(59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u,59685u,59685u,59685u,59685u,59685u,59685u,59685u)),
        BigInt256(array<u32, 16>(59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u,59685u,59685u,59685u,59685u,59685u,59685u,59685u)),
        BigInt256(array<u32, 16>(59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u,59685u,59685u,59685u,59685u,59685u,59685u,59685u)),
    );
    var values: array<BigInt256, 10> =  array<BigInt256, 10> (
        BigInt256(array<u32, 16>(59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u,59685u,59685u,59685u,59685u,59685u,59685u,59685u)),
        BigInt256(array<u32, 16>(59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u,59685u,59685u,59685u,59685u,59685u,59685u,59685u)),
        BigInt256(array<u32, 16>(59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u,59685u,59685u,59685u,59685u,59685u,59685u,59685u)),
        BigInt256(array<u32, 16>(59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u,59685u,59685u,59685u,59685u,59685u,59685u,59685u)),
        BigInt256(array<u32, 16>(59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u,59685u,59685u,59685u,59685u,59685u,59685u,59685u)),
        BigInt256(array<u32, 16>(59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u,59685u,59685u,59685u,59685u,59685u,59685u,59685u)),
        BigInt256(array<u32, 16>(59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u,59685u,59685u,59685u,59685u,59685u,59685u,59685u)),
        BigInt256(array<u32, 16>(59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u,59685u,59685u,59685u,59685u,59685u,59685u,59685u)),
        BigInt256(array<u32, 16>(59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u,59685u,59685u,59685u,59685u,59685u,59685u,59685u)),
        BigInt256(array<u32, 16>(59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u, 59685u,59685u,59685u,59685u,59685u,59685u,59685u,59685u)),
    );
    

    for (var m = 1u; m < n; m *= 2u) {
        if (i < m) {
            var j = i + m;
            var u = values[i];
            var v = fr_mul(&values[j], &roots[n / (2u * m)]);
            values[i] = fr_add(&u, &v);
            values[j] = fr_sub(&u, &v);
            values[i] = fr_mod(&values[i], &p);
            values[j] = fr_mod(&values[j], &p);
        }
    }

    buf[global_id.x] = values[bitreverse(i, n)];
}

@compute
@workgroup_size(64)
fn bitreverse(@builtin(global_invocation_id) global_id: vec3<u32>) -> u32 {
    var i: u32 = global_id.x;
    var r = 0u;
    var n: u32 = 10u;
    while (n > 0u) {
        r = (r << 1u) | (i & 1u);
        i = i >> 1u;
        n = n >> 1u;
    }
    return r;
}